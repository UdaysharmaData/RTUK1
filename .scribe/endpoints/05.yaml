name: 'Two-factor authentication'
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: api/v1/2fa
    metadata:
      groupName: 'Two-factor authentication'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'List of 2fa methods'
      description: 'Get all actives 2fa methods available in the platform.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
      X-Client-Key: 15efff517947ca8fbf0e87ffafcd6e9c8e778415dfe60f4e570ecbdf76e8ebc0
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          vary: Origin
        description: null
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 3E4vPga6851kdZ6afceVbDh'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/v1/2fa/{method_ref}/enable'
    metadata:
      groupName: 'Two-factor authentication'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Enable a 2fa method'
      description: |-
        User enables a 2fa method, and it's done in two steps. When a user enables a 2fa method for the first time,
        we generate recovery codes a list of 10 codes of 8 characters that can be used once to bypass the 2fa security in case
        the user loses his phone. Endpoints where the 2fa are applied for now: Login, Password Update

        Step 1: We initialize the 2fa depending on the method chosen by the user. For the
        sms & email case, an OTP code will be sent to the user via a specific driver (sms or mail), and for the Google
        authentication case a QR code will be generated

        Step 2: We validate the OTP code entered by the user and enable the 2fa method.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      X-Client-Key: 15efff517947ca8fbf0e87ffafcd6e9c8e778415dfe60f4e570ecbdf76e8ebc0
    urlParameters:
      method_ref:
        name: method_ref
        description: 'specifies 2fa method ref attribute.'
        required: true
        example: 975dcf12-eda2-4437-8c96-6df4e790d074
        type: string
        custom: []
    cleanUrlParameters:
      method_ref: 975dcf12-eda2-4437-8c96-6df4e790d074
    queryParameters:
      step:
        name: step
        description: 'specifying the step.'
        required: true
        example: '1 or 2'
        type: string
        custom: []
    cleanQueryParameters:
      step: '1 or 2'
    bodyParameters:
      totp_code:
        name: totp_code
        description: |-
          optional The Totp code is only required at step 2 which is used to validate
          the otp code and enable the 2fa method.
        required: false
        example: '675899'
        type: string
        custom: []
    cleanBodyParameters:
      totp_code: '675899'
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/v1/2fa/{method_ref}/disable'
    metadata:
      groupName: 'Two-factor authentication'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Disable a 2fa method'
      description: |-
        User disable a 2fa method, and it's done in 2 steps:

        Step 1: We sent an OTP code for sms and email verification,and for Google auth method the user generate
        an otp code from the authentication app

        Step 2: We validate the OTP code entered by the user, and disable the method.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      X-Client-Key: 15efff517947ca8fbf0e87ffafcd6e9c8e778415dfe60f4e570ecbdf76e8ebc0
    urlParameters:
      method_ref:
        name: method_ref
        description: 'specifies 2fa method ref attribute.'
        required: true
        example: 975dcf12-eda2-4437-8c96-6df4e790d074
        type: string
        custom: []
    cleanUrlParameters:
      method_ref: 975dcf12-eda2-4437-8c96-6df4e790d074
    queryParameters:
      step:
        name: step
        description: 'specifying the step.'
        required: true
        example: '1 or 2'
        type: string
        custom: []
    cleanQueryParameters:
      step: '1 or 2'
    bodyParameters:
      totp_code:
        name: totp_code
        description: |-
          optional The Totp code is only required at step 2 which is used to validate
          the otp code or recovery code and disable the 2fa method.
        required: false
        example: '123456 or ABCDEFGHI(recovery code)'
        type: string
        custom: []
    cleanBodyParameters:
      totp_code: '123456 or ABCDEFGHI(recovery code)'
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/v1/2fa/{method_ref}/default'
    metadata:
      groupName: 'Two-factor authentication'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Mark a 2fa method as default'
      description: 'When a user has more than one method enabled, he can set one as the default'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      X-Client-Key: 15efff517947ca8fbf0e87ffafcd6e9c8e778415dfe60f4e570ecbdf76e8ebc0
    urlParameters:
      method_ref:
        name: method_ref
        description: 'specifies 2fa method ref attribute.'
        required: true
        example: 975dcf12-eda2-4437-8c96-6df4e790d074
        type: string
        custom: []
    cleanUrlParameters:
      method_ref: 975dcf12-eda2-4437-8c96-6df4e790d074
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/v1/2fa/{method_ref}/otp/send'
    metadata:
      groupName: 'Two-factor authentication'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Send 2fa code'
      description: |-
        Use this endpoint to send an otp code in case the user has enabled a 2fa method(Only Email or Sms verification method).
        It can be used if a route required a 2fa such as the Login endpoint
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      X-Client-Key: 15efff517947ca8fbf0e87ffafcd6e9c8e778415dfe60f4e570ecbdf76e8ebc0
    urlParameters:
      method_ref:
        name: method_ref
        description: 'specifies 2fa method ref attribute.'
        required: true
        example: 975dcf12-eda2-4437-8c96-6df4e790d074
        type: string
        custom: []
    cleanUrlParameters:
      method_ref: 975dcf12-eda2-4437-8c96-6df4e790d074
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/2fa/token/generate
    metadata:
      groupName: 'Two-factor authentication'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Generate a 2fa token'
      description: |-
        Generate a temporal token that will be used by certain endpoint in case the 2fa method has been enabled by the user.
        For now the token will be used when the user want to update his password and generate new recovery codes.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      X-Client-Key: 15efff517947ca8fbf0e87ffafcd6e9c8e778415dfe60f4e570ecbdf76e8ebc0
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      totp_code:
        name: totp_code
        description: |-
          The Totp code received by mail, sms or generate by the authenticator app.
          depending on the 2fa method chosen by the user. The user can also use the recovery code.
        required: true
        example: '675899 or APXAEFENNM(recovery code)'
        type: string
        custom: []
    cleanBodyParameters:
      totp_code: '675899 or APXAEFENNM(recovery code)'
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/2fa/token/valid
    metadata:
      groupName: 'Two-factor authentication'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: '2fa token validity'
      description: 'Check if the 2fa token is valid'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      X-Client-Key: 15efff517947ca8fbf0e87ffafcd6e9c8e778415dfe60f4e570ecbdf76e8ebc0
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      totp_token:
        name: totp_token
        description: 'The 2fa token generated by the user.'
        required: true
        example: e38ceddc464281b6205191473388d8787270f070
        type: string
        custom: []
    cleanBodyParameters:
      totp_token: e38ceddc464281b6205191473388d8787270f070
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/2fa/recovery-codes/generate
    metadata:
      groupName: 'Two-factor authentication'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Renew recovery codes'
      description: |-
        we generate recovery codes a list of 10 codes of 8 characters that can be used once to bypass the 2fa security in case
        the user lost his phone.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      X-Client-Key: 15efff517947ca8fbf0e87ffafcd6e9c8e778415dfe60f4e570ecbdf76e8ebc0
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      totp_token:
        name: totp_token
        description: ''
        required: true
        example: e38ceddc464281b6205191473388d8787270f070
        type: string
        custom: []
    cleanBodyParameters:
      totp_token: e38ceddc464281b6205191473388d8787270f070
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
